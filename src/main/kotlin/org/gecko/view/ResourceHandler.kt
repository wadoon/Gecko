package org.gecko.view

/**
 * Provides methods for getting [String]s that are dependent on a given key and the Language currently used in the
 * view.
 */
interface ResourceHandler {
    companion object {
        const val delete: String = "Delete"
        const val set_start_state: String = "Set as start state"
        const val change_kind: String = "Change kind"
        const val open_system: String = "Open system"
        const val undo: String = "Undo"
        const val redo: String = "Redo"
        const val cut: String = "Cut"
        const val copy: String = "Copy"
        const val paste: String = "Paste"
        const val select_all: String = "Select all"
        const val deselect_all: String = "Deselect all"
        const val NEW: String = "New"
        const val open: String = "Open"
        const val save: String = "Save"
        const val save_as: String = "Save as"
        const val IMPORT: String = "Import"
        const val export: String = "Export"
        const val change_view: String = "Switch view"
        const val go_to_parent_system: String = "Go to parent system"
        const val focus_selected_element: String = "Focus selected element"
        const val zoom_in: String = "Zoom in"
        const val zoom_out: String = "Zoom out"
        const val toggle_appearance: String = "Toggle appearance"
        const val search_elements: String = "Search elements"
        const val inspector_add_variable: String = "Add"
        const val inspector_add_contract: String = "Add"
        const val inspector_open_system: String = "Open"

        const val pre_condition: String = "Pre"
        const val post_condition: String = "Post"
        const val invariant: String = "Inv"
        const val contract: String = "Contract"
        const val contract_plural: String = "Contracts"
        const val kind: String = "Kind"
        const val priority: String = "Priority"
        const val color: String = "Color"
        const val type: String = "Type"
        const val input: String = "Input"
        const val output: String = "Output"
        const val visibility: String = "Visibility"
        const val source: String = "Source"
        const val target: String = "Target"
        const val region_plural: String = "Regions"
        const val code: String = "Code"
        const val rename_root_system: String = "Rename root system"
        const val variable_value: String = "Value"
        const val name: String = "Name"
        const val state: String = "State"
        const val region: String = "Region"
        const val pre_condition_short: String = "Pre"
        const val post_condition_short: String = "Post"
        const val invariant_short: String = "Inv"
        const val file: String = "File"
        const val edit: String = "Edit"
        const val view: String = "View"
        const val tools: String = "Tools"
        const val matches_format_string: String = "%d of %d matches"
        const val save_changes_prompt: String = "Do you want to save your changes?"
        const val confirm_exit: String = "Confirm Exit"
        const val search: String = "Search"

        const val automaton: String = "Automaton"
        const val system: String = "System"

        const val title: String = "Warning"
        const val parse_header: String = "The model has been successfully parsed, but warnings have been emitted"
        const val multiple_top_level_header: String =
            "Found multiple top level systems. Please choose a system as root of the project."
        const val corrupted_file: String = "Corrupted file. Could not load project from "
        const val could_not_read_file: String = "Could not read file: "
        const val could_not_write_file: String = "Could not write file."


        const val inspector_remove_contract: String = "Remove the contract from the state"
        const val inspector_remove_variable: String = "Remove the variable from the system"
        const val inspector_focus_element: String = "Focus the element"
        const val inspector_selection_backward: String = "Show the previous selection"
        const val inspector_selection_forward: String = "Show the next selection"
        const val switch_view: String = "Switch view"
        const val parent_system: String = "Go to parent system"


        const val cursor: String = "Cursor Tool"
        const val marquee: String = "Marquee Tool"
        const val pan: String = "Pan Tool"
        const val zoom: String = "Zoom Tool"
        const val state_creator: String = "State Creator Tool"
        const val edge_creator: String = "Edge Creator Tool"
        const val region_creator: String = "Region Creator Tool"
        const val system_creator: String = "System Creator Tool"
        const val connection_creator: String = "Connection Creator Tool"
        const val variable_block_creator: String = "Variable Block Creator Tool"
    }
}
